extends Node2D

var sprites = []
var velocities = []  # Stores the velocities for each sprite
var spawnAreaHeight = 200
var gravity = 500.0  # Adjust this value to control the strength of gravity

func _ready():
    spawnSprite(Vector2(100, 100), Vector2(0, 0))

func _physics_process(delta):
    var to_remove = []
    for i in range(sprites.size()):
        var sprite = sprites[i]
        var velocity = velocities[i]  # Get the velocity for this sprite
        
        # Apply gravity by adjusting the Y velocity
        velocity.y += gravity * delta
        
        # Update the sprite's position based on velocity
        sprite.position += velocity * delta
        
        # Check if the sprite is below the screen, then mark it for removal
        if sprite.position.y > get_viewport_rect().size.y:
            to_remove.append(i)
        
        # Check for collisions with the ground (assuming you have a CollisionShape2D for the ground)
        if sprite.is_colliding():
            velocity = Vector2()  # Stop the sprite when it collides with the ground
    
    # Remove marked sprites from the list
    for i in to_remove.reversed():
        sprites[i].queue_free()

func spawnSprite(position, velocity):
    var newSprite = Sprite2D.new()
    newSprite.texture = preload("res://path_to_your_texture.png")
    add_child(newSprite)

    newSprite.position = position

    sprites.append(newSprite)
    velocities.append(velocity)  # Store the velocity for this sprite

func _on_CollisionShape2D_area_entered(area):
    # Check if the colliding area is a sprite, and if so, stop its velocity
    if area is Sprite2D:
        var index = sprites.find(area)
        if index != -1:
            velocities[index] = Vector2()  # Stop the sprite's velocity
