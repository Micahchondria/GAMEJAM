extends Node2D

var sprites = []
var spawnAreaHeight = 200
var gravity = 500.0  # Adjust this value to control the strength of gravity

func _ready():
    spawnSprite(Vector2(100, 100), Vector2(0, 0))

func _physics_process(delta):
    var to_remove = []
    for i in range(sprites.size()):
        var kinematicBody = sprites[i]
        
        # Apply gravity by adjusting the Y velocity
        kinematicBody.velocity.y += gravity * delta
        
        # Update the kinematic body's position based on velocity
        kinematicBody.move_and_slide(kinematicBody.velocity)
        
        # Check if the kinematic body is below the screen, then mark it for removal
        if kinematicBody.position.y > get_viewport_rect().size.y:
            to_remove.append(i)
        
        # Check for collisions with the ground
        if kinematicBody.is_colliding():
            kinematicBody.velocity = Vector2()  # Stop the kinematic body when it collides with the ground
    
    # Remove marked kinematic bodies from the list
    for i in to_remove.reversed():
        sprites[i].queue_free()

func spawnSprite(position, velocity):
    var kinematicBody = KinematicBody2D.new()
    add_child(kinematicBody)
    kinematicBody.position = position
    
    # Create a CollisionShape2D to represent the sprite's collision
    var collisionShape = CollisionShape2D.new()
    var shape = RectangleShape2D.new()
    shape.extents = Vector2(16, 16)  # Adjust the extents as needed
    collisionShape.shape = shape
    kinematicBody.add_child(collisionShape)

    # Store the velocity for this kinematic body
    kinematicBody.velocity = velocity
    kinematicBody.is_colliding = false

    sprites.append(kinematicBody)
